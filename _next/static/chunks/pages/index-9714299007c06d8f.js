(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[405],{5728:function(e,t,l){(window.__NEXT_P=window.__NEXT_P||[]).push(["/",function(){return l(6196)}])},8864:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,t){for(var l in t)Object.defineProperty(e,l,{enumerable:!0,get:t[l]})}(t,{default:function(){return o},noSSR:function(){return a}});let r=l(8754);l(5893),l(7294);let n=r._(l(6016));function s(e){return{default:(null==e?void 0:e.default)||e}}function a(e,t){return delete t.webpack,delete t.modules,e(t)}function o(e,t){let l=n.default,r={loading:e=>{let{error:t,isLoading:l,pastDelay:r}=e;return null}};e instanceof Promise?r.loader=()=>e:"function"==typeof e?r.loader=e:"object"==typeof e&&(r={...r,...e});let o=(r={...r,...t}).loader;return(r.loadableGenerated&&(r={...r,...r.loadableGenerated},delete r.loadableGenerated),"boolean"!=typeof r.ssr||r.ssr)?l({...r,loader:()=>null!=o?o().then(s):Promise.resolve(s(()=>null))}):(delete r.webpack,delete r.modules,a(l,r))}("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},572:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"LoadableContext",{enumerable:!0,get:function(){return r}});let r=l(8754)._(l(7294)).default.createContext(null)},6016:function(e,t,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return h}});let r=l(8754)._(l(7294)),n=l(572),s=[],a=[],o=!1;function i(e){let t=e(),l={loading:!0,loaded:null,error:null};return l.promise=t.then(e=>(l.loading=!1,l.loaded=e,e)).catch(e=>{throw l.loading=!1,l.error=e,e}),l}class d{promise(){return this._res.promise}retry(){this._clearTimeouts(),this._res=this._loadFn(this._opts.loader),this._state={pastDelay:!1,timedOut:!1};let{_res:e,_opts:t}=this;e.loading&&("number"==typeof t.delay&&(0===t.delay?this._state.pastDelay=!0:this._delay=setTimeout(()=>{this._update({pastDelay:!0})},t.delay)),"number"==typeof t.timeout&&(this._timeout=setTimeout(()=>{this._update({timedOut:!0})},t.timeout))),this._res.promise.then(()=>{this._update({}),this._clearTimeouts()}).catch(e=>{this._update({}),this._clearTimeouts()}),this._update({})}_update(e){this._state={...this._state,error:this._res.error,loaded:this._res.loaded,loading:this._res.loading,...e},this._callbacks.forEach(e=>e())}_clearTimeouts(){clearTimeout(this._delay),clearTimeout(this._timeout)}getCurrentValue(){return this._state}subscribe(e){return this._callbacks.add(e),()=>{this._callbacks.delete(e)}}constructor(e,t){this._loadFn=e,this._opts=t,this._callbacks=new Set,this._delay=null,this._timeout=null,this.retry()}}function u(e){return function(e,t){let l=Object.assign({loader:null,loading:null,delay:200,timeout:null,webpack:null,modules:null},t),s=null;function i(){if(!s){let t=new d(e,l);s={getCurrentValue:t.getCurrentValue.bind(t),subscribe:t.subscribe.bind(t),retry:t.retry.bind(t),promise:t.promise.bind(t)}}return s.promise()}if(!o){let e=l.webpack?l.webpack():l.modules;e&&a.push(t=>{for(let l of e)if(t.includes(l))return i()})}function u(e,t){!function(){i();let e=r.default.useContext(n.LoadableContext);e&&Array.isArray(l.modules)&&l.modules.forEach(t=>{e(t)})}();let a=r.default.useSyncExternalStore(s.subscribe,s.getCurrentValue,s.getCurrentValue);return r.default.useImperativeHandle(t,()=>({retry:s.retry}),[]),r.default.useMemo(()=>{var t;return a.loading||a.error?r.default.createElement(l.loading,{isLoading:a.loading,pastDelay:a.pastDelay,timedOut:a.timedOut,error:a.error,retry:s.retry}):a.loaded?r.default.createElement((t=a.loaded)&&t.default?t.default:t,e):null},[e,a])}return u.preload=()=>i(),u.displayName="LoadableComponent",r.default.forwardRef(u)}(i,e)}function c(e,t){let l=[];for(;e.length;){let r=e.pop();l.push(r(t))}return Promise.all(l).then(()=>{if(e.length)return c(e,t)})}u.preloadAll=()=>new Promise((e,t)=>{c(s).then(e,t)}),u.preloadReady=e=>(void 0===e&&(e=[]),new Promise(t=>{let l=()=>(o=!0,t());c(a,e).then(l,l)})),window.__NEXT_PRELOADREADY=u.preloadReady;let h=u},6196:function(e,t,l){"use strict";l.r(t),l.d(t,{default:function(){return d}});var r=l(5893),n=l(5152),s=l.n(n),a=l(5050),o=()=>(0,r.jsx)("section",{id:"features",className:"bg-white py-16",children:(0,r.jsxs)("div",{className:"container mx-auto text-center",children:[(0,r.jsx)("h2",{className:"mb-8 text-4xl font-bold",children:"Our Features"}),(0,r.jsxs)("div",{className:"grid gap-12 px-4 md:grid-cols-3",children:[(0,r.jsxs)("div",{className:"rounded-lg bg-gray-100 p-8 shadow-lg",children:[(0,r.jsx)("h3",{className:"mb-4 text-xl font-semibold",children:"Sync Videos in Real-Time"}),(0,r.jsx)("p",{children:"Watch YouTube, Vimeo, and VK videos together in perfect sync."})]}),(0,r.jsxs)("div",{className:"rounded-lg bg-gray-100 p-8 shadow-lg",children:[(0,r.jsx)("h3",{className:"mb-4 text-xl font-semibold",children:"Integrated Chat"}),(0,r.jsx)("p",{children:"Chat with friends while watching videos. Stay connected during the fun!"})]}),(0,r.jsxs)("div",{className:"rounded-lg bg-gray-100 p-8 shadow-lg",children:[(0,r.jsx)("h3",{className:"mb-4 text-xl font-semibold",children:"Ad Skipping"}),(0,r.jsx)("p",{children:"Use SponsorBlock to automatically skip YouTube ads and sponsor segments."})]})]})]})});let i=s()(()=>Promise.all([l.e(802),l.e(990),l.e(803)]).then(l.bind(l,5803)),{loadableGenerated:{webpack:()=>[5803]},ssr:!1});var d=()=>(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.Z,{}),(0,r.jsxs)("div",{className:"relative mt-20 flex h-[65vh] w-full flex-col items-center justify-between p-6 text-center md:flex-row md:text-left",children:[(0,r.jsx)(i,{}),(0,r.jsxs)("div",{className:"relative z-10 mb-8 text-center md:mb-0 md:w-1/2 md:text-left lg:pl-20",children:[(0,r.jsx)("h2",{className:"text-shadow-lg mb-4 font-sans text-5xl font-bold text-black",children:"Watch Videos Together, Anywhere"}),(0,r.jsxs)("p",{className:"text-2xl text-black no-underline",children:["Sync YouTube, Vimeo, and VK videos with friends and skip ads with"," ",(0,r.jsx)("a",{href:"https://sponsor.ajay.app",className:"font-medium hover:underline",children:"SponsorBlock"}),"."]})]}),(0,r.jsx)("div",{className:"relative z-10 text-center md:w-1/2 md:text-right lg:pr-20",children:(0,r.jsx)("button",{id:"createRoomBtn",className:"select-none rounded-lg bg-transparent px-8 py-4 text-sm font-medium text-black shadow-xl backdrop-blur-sm",onClick:()=>{fetch("/api/createRoom",{method:"POST"}).then(e=>{e.redirected&&(window.location.href=e.url)})},children:"Create a Room"})})]}),(0,r.jsx)(o,{})]})},5152:function(e,t,l){e.exports=l(8864)},5050:function(e,t,l){"use strict";var r=l(5893),n=l(1664);t.Z=()=>(0,r.jsx)("header",{className:"fixed top-0 z-50 w-full rounded-b-lg bg-opacity-50 py-4 text-black shadow-lg backdrop-blur-sm transition-all duration-300",children:(0,r.jsxs)("div",{className:"container mx-auto flex items-center justify-between px-6",children:[(0,r.jsx)("h1",{className:"text-2xl font-bold",children:"Watch2Gether"}),(0,r.jsxs)("nav",{className:"select-none font-mono",children:[(0,r.jsx)(n,{href:"/",className:"mx-3 hover:underline",children:"Home"}),(0,r.jsx)("a",{href:"#features",className:"mx-3 hover:underline",children:"Features"})]})]})})}},function(e){e.O(0,[664,888,774,179],function(){return e(e.s=5728)}),_N_E=e.O()}]);